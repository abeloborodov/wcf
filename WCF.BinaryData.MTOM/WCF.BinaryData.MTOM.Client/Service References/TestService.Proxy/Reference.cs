//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCF.BinaryData.MTOM.Client.TestService.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    //[System.Runtime.Serialization.DataContractAttribute(Name="AttachmentContent", Namespace="http://tempuri.org/")]
    [System.SerializableAttribute()]
    public partial class AttachmentContent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public byte[] ContentData {
            get {
                return this.ContentDataField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentDataField, value) != true)) {
                    this.ContentDataField = value;
                    this.RaisePropertyChanged("ContentData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestService.Proxy.ITestService")]
    public interface ITestService {
        
        // CODEGEN: Generating message contract since the operation SendRequest is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SendRequest", ReplyAction="http://tempuri.org/ITestService/SendRequestResponse")]
        WCF.BinaryData.MTOM.Client.TestService.Proxy.SendRequestResponse SendRequest(WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/SendRequest", ReplyAction="http://tempuri.org/ITestService/SendRequestResponse")]
        System.Threading.Tasks.Task<WCF.BinaryData.MTOM.Client.TestService.Proxy.SendRequestResponse> SendRequestAsync(WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RequestWithAttachments", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RequestWithAttachments {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string MessageID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public WCF.BinaryData.MTOM.Client.TestService.Proxy.AttachmentContent[] AttachmentContentList;
        
        public RequestWithAttachments() {
        }
        
        public RequestWithAttachments(string MessageID, WCF.BinaryData.MTOM.Client.TestService.Proxy.AttachmentContent[] AttachmentContentList) {
            this.MessageID = MessageID;
            this.AttachmentContentList = AttachmentContentList;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SendRequestResponse {
        
        public SendRequestResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService>, WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WCF.BinaryData.MTOM.Client.TestService.Proxy.SendRequestResponse WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService.SendRequest(WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments request) {
            return base.Channel.SendRequest(request);
        }
        
        public void SendRequest(string MessageID, WCF.BinaryData.MTOM.Client.TestService.Proxy.AttachmentContent[] AttachmentContentList) {
            WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments inValue = new WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments();
            inValue.MessageID = MessageID;
            inValue.AttachmentContentList = AttachmentContentList;
            WCF.BinaryData.MTOM.Client.TestService.Proxy.SendRequestResponse retVal = ((WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService)(this)).SendRequest(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WCF.BinaryData.MTOM.Client.TestService.Proxy.SendRequestResponse> WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService.SendRequestAsync(WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments request) {
            return base.Channel.SendRequestAsync(request);
        }
        
        public System.Threading.Tasks.Task<WCF.BinaryData.MTOM.Client.TestService.Proxy.SendRequestResponse> SendRequestAsync(string MessageID, WCF.BinaryData.MTOM.Client.TestService.Proxy.AttachmentContent[] AttachmentContentList) {
            WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments inValue = new WCF.BinaryData.MTOM.Client.TestService.Proxy.RequestWithAttachments();
            inValue.MessageID = MessageID;
            inValue.AttachmentContentList = AttachmentContentList;
            return ((WCF.BinaryData.MTOM.Client.TestService.Proxy.ITestService)(this)).SendRequestAsync(inValue);
        }
    }
}
